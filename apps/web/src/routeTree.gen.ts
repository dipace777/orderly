/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as LoginRouteImport } from './routes/login'
import { Route as DashboardRouteImport } from './routes/_dashboard'
import { Route as IndexRouteImport } from './routes/index'
import { Route as DashboardUsersRouteImport } from './routes/_dashboard/users'
import { Route as DashboardReportsRouteImport } from './routes/_dashboard/reports'
import { Route as DashboardOrdersRouteImport } from './routes/_dashboard/orders'
import { Route as DashboardFoodMenuRouteImport } from './routes/_dashboard/food-menu'
import { Route as DashboardDashboardRouteImport } from './routes/_dashboard/dashboard'

const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardRoute = DashboardRouteImport.update({
  id: '/_dashboard',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardUsersRoute = DashboardUsersRouteImport.update({
  id: '/users',
  path: '/users',
  getParentRoute: () => DashboardRoute,
} as any)
const DashboardReportsRoute = DashboardReportsRouteImport.update({
  id: '/reports',
  path: '/reports',
  getParentRoute: () => DashboardRoute,
} as any)
const DashboardOrdersRoute = DashboardOrdersRouteImport.update({
  id: '/orders',
  path: '/orders',
  getParentRoute: () => DashboardRoute,
} as any)
const DashboardFoodMenuRoute = DashboardFoodMenuRouteImport.update({
  id: '/food-menu',
  path: '/food-menu',
  getParentRoute: () => DashboardRoute,
} as any)
const DashboardDashboardRoute = DashboardDashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => DashboardRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/dashboard': typeof DashboardDashboardRoute
  '/food-menu': typeof DashboardFoodMenuRoute
  '/orders': typeof DashboardOrdersRoute
  '/reports': typeof DashboardReportsRoute
  '/users': typeof DashboardUsersRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/dashboard': typeof DashboardDashboardRoute
  '/food-menu': typeof DashboardFoodMenuRoute
  '/orders': typeof DashboardOrdersRoute
  '/reports': typeof DashboardReportsRoute
  '/users': typeof DashboardUsersRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_dashboard': typeof DashboardRouteWithChildren
  '/login': typeof LoginRoute
  '/_dashboard/dashboard': typeof DashboardDashboardRoute
  '/_dashboard/food-menu': typeof DashboardFoodMenuRoute
  '/_dashboard/orders': typeof DashboardOrdersRoute
  '/_dashboard/reports': typeof DashboardReportsRoute
  '/_dashboard/users': typeof DashboardUsersRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/login'
    | '/dashboard'
    | '/food-menu'
    | '/orders'
    | '/reports'
    | '/users'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/login'
    | '/dashboard'
    | '/food-menu'
    | '/orders'
    | '/reports'
    | '/users'
  id:
    | '__root__'
    | '/'
    | '/_dashboard'
    | '/login'
    | '/_dashboard/dashboard'
    | '/_dashboard/food-menu'
    | '/_dashboard/orders'
    | '/_dashboard/reports'
    | '/_dashboard/users'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  DashboardRoute: typeof DashboardRouteWithChildren
  LoginRoute: typeof LoginRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_dashboard': {
      id: '/_dashboard'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof DashboardRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_dashboard/users': {
      id: '/_dashboard/users'
      path: '/users'
      fullPath: '/users'
      preLoaderRoute: typeof DashboardUsersRouteImport
      parentRoute: typeof DashboardRoute
    }
    '/_dashboard/reports': {
      id: '/_dashboard/reports'
      path: '/reports'
      fullPath: '/reports'
      preLoaderRoute: typeof DashboardReportsRouteImport
      parentRoute: typeof DashboardRoute
    }
    '/_dashboard/orders': {
      id: '/_dashboard/orders'
      path: '/orders'
      fullPath: '/orders'
      preLoaderRoute: typeof DashboardOrdersRouteImport
      parentRoute: typeof DashboardRoute
    }
    '/_dashboard/food-menu': {
      id: '/_dashboard/food-menu'
      path: '/food-menu'
      fullPath: '/food-menu'
      preLoaderRoute: typeof DashboardFoodMenuRouteImport
      parentRoute: typeof DashboardRoute
    }
    '/_dashboard/dashboard': {
      id: '/_dashboard/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardDashboardRouteImport
      parentRoute: typeof DashboardRoute
    }
  }
}

interface DashboardRouteChildren {
  DashboardDashboardRoute: typeof DashboardDashboardRoute
  DashboardFoodMenuRoute: typeof DashboardFoodMenuRoute
  DashboardOrdersRoute: typeof DashboardOrdersRoute
  DashboardReportsRoute: typeof DashboardReportsRoute
  DashboardUsersRoute: typeof DashboardUsersRoute
}

const DashboardRouteChildren: DashboardRouteChildren = {
  DashboardDashboardRoute: DashboardDashboardRoute,
  DashboardFoodMenuRoute: DashboardFoodMenuRoute,
  DashboardOrdersRoute: DashboardOrdersRoute,
  DashboardReportsRoute: DashboardReportsRoute,
  DashboardUsersRoute: DashboardUsersRoute,
}

const DashboardRouteWithChildren = DashboardRoute._addFileChildren(
  DashboardRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DashboardRoute: DashboardRouteWithChildren,
  LoginRoute: LoginRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

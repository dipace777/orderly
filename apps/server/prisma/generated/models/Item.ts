
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `Item` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Item
 * 
 */
export type ItemModel = runtime.Types.Result.DefaultSelection<Prisma.$ItemPayload>

export type AggregateItem = {
  _count: ItemCountAggregateOutputType | null
  _avg: ItemAvgAggregateOutputType | null
  _sum: ItemSumAggregateOutputType | null
  _min: ItemMinAggregateOutputType | null
  _max: ItemMaxAggregateOutputType | null
}

export type ItemAvgAggregateOutputType = {
  id: number | null
  price: number | null
  categoryId: number | null
}

export type ItemSumAggregateOutputType = {
  id: number | null
  price: number | null
  categoryId: number | null
}

export type ItemMinAggregateOutputType = {
  id: number | null
  name: string | null
  description: string | null
  price: number | null
  categoryId: number | null
  createdAt: Date | null
}

export type ItemMaxAggregateOutputType = {
  id: number | null
  name: string | null
  description: string | null
  price: number | null
  categoryId: number | null
  createdAt: Date | null
}

export type ItemCountAggregateOutputType = {
  id: number
  name: number
  description: number
  price: number
  categoryId: number
  createdAt: number
  _all: number
}


export type ItemAvgAggregateInputType = {
  id?: true
  price?: true
  categoryId?: true
}

export type ItemSumAggregateInputType = {
  id?: true
  price?: true
  categoryId?: true
}

export type ItemMinAggregateInputType = {
  id?: true
  name?: true
  description?: true
  price?: true
  categoryId?: true
  createdAt?: true
}

export type ItemMaxAggregateInputType = {
  id?: true
  name?: true
  description?: true
  price?: true
  categoryId?: true
  createdAt?: true
}

export type ItemCountAggregateInputType = {
  id?: true
  name?: true
  description?: true
  price?: true
  categoryId?: true
  createdAt?: true
  _all?: true
}

export type ItemAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Item to aggregate.
   */
  where?: Prisma.ItemWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Items to fetch.
   */
  orderBy?: Prisma.ItemOrderByWithRelationInput | Prisma.ItemOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ItemWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Items from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Items.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Items
  **/
  _count?: true | ItemCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: ItemAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: ItemSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ItemMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ItemMaxAggregateInputType
}

export type GetItemAggregateType<T extends ItemAggregateArgs> = {
      [P in keyof T & keyof AggregateItem]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateItem[P]>
    : Prisma.GetScalarType<T[P], AggregateItem[P]>
}




export type ItemGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ItemWhereInput
  orderBy?: Prisma.ItemOrderByWithAggregationInput | Prisma.ItemOrderByWithAggregationInput[]
  by: Prisma.ItemScalarFieldEnum[] | Prisma.ItemScalarFieldEnum
  having?: Prisma.ItemScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ItemCountAggregateInputType | true
  _avg?: ItemAvgAggregateInputType
  _sum?: ItemSumAggregateInputType
  _min?: ItemMinAggregateInputType
  _max?: ItemMaxAggregateInputType
}

export type ItemGroupByOutputType = {
  id: number
  name: string
  description: string | null
  price: number
  categoryId: number
  createdAt: Date
  _count: ItemCountAggregateOutputType | null
  _avg: ItemAvgAggregateOutputType | null
  _sum: ItemSumAggregateOutputType | null
  _min: ItemMinAggregateOutputType | null
  _max: ItemMaxAggregateOutputType | null
}

type GetItemGroupByPayload<T extends ItemGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ItemGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ItemGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ItemGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ItemGroupByOutputType[P]>
      }
    >
  > 



export type ItemWhereInput = {
  AND?: Prisma.ItemWhereInput | Prisma.ItemWhereInput[]
  OR?: Prisma.ItemWhereInput[]
  NOT?: Prisma.ItemWhereInput | Prisma.ItemWhereInput[]
  id?: Prisma.IntFilter<"Item"> | number
  name?: Prisma.StringFilter<"Item"> | string
  description?: Prisma.StringNullableFilter<"Item"> | string | null
  price?: Prisma.FloatFilter<"Item"> | number
  categoryId?: Prisma.IntFilter<"Item"> | number
  createdAt?: Prisma.DateTimeFilter<"Item"> | Date | string
  category?: Prisma.XOR<Prisma.CategoryScalarRelationFilter, Prisma.CategoryWhereInput>
  orderItems?: Prisma.OrderItemListRelationFilter
}

export type ItemOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrderInput | Prisma.SortOrder
  price?: Prisma.SortOrder
  categoryId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  category?: Prisma.CategoryOrderByWithRelationInput
  orderItems?: Prisma.OrderItemOrderByRelationAggregateInput
}

export type ItemWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  AND?: Prisma.ItemWhereInput | Prisma.ItemWhereInput[]
  OR?: Prisma.ItemWhereInput[]
  NOT?: Prisma.ItemWhereInput | Prisma.ItemWhereInput[]
  name?: Prisma.StringFilter<"Item"> | string
  description?: Prisma.StringNullableFilter<"Item"> | string | null
  price?: Prisma.FloatFilter<"Item"> | number
  categoryId?: Prisma.IntFilter<"Item"> | number
  createdAt?: Prisma.DateTimeFilter<"Item"> | Date | string
  category?: Prisma.XOR<Prisma.CategoryScalarRelationFilter, Prisma.CategoryWhereInput>
  orderItems?: Prisma.OrderItemListRelationFilter
}, "id">

export type ItemOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrderInput | Prisma.SortOrder
  price?: Prisma.SortOrder
  categoryId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  _count?: Prisma.ItemCountOrderByAggregateInput
  _avg?: Prisma.ItemAvgOrderByAggregateInput
  _max?: Prisma.ItemMaxOrderByAggregateInput
  _min?: Prisma.ItemMinOrderByAggregateInput
  _sum?: Prisma.ItemSumOrderByAggregateInput
}

export type ItemScalarWhereWithAggregatesInput = {
  AND?: Prisma.ItemScalarWhereWithAggregatesInput | Prisma.ItemScalarWhereWithAggregatesInput[]
  OR?: Prisma.ItemScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ItemScalarWhereWithAggregatesInput | Prisma.ItemScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"Item"> | number
  name?: Prisma.StringWithAggregatesFilter<"Item"> | string
  description?: Prisma.StringNullableWithAggregatesFilter<"Item"> | string | null
  price?: Prisma.FloatWithAggregatesFilter<"Item"> | number
  categoryId?: Prisma.IntWithAggregatesFilter<"Item"> | number
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Item"> | Date | string
}

export type ItemCreateInput = {
  name: string
  description?: string | null
  price: number
  createdAt?: Date | string
  category: Prisma.CategoryCreateNestedOneWithoutItemsInput
  orderItems?: Prisma.OrderItemCreateNestedManyWithoutItemInput
}

export type ItemUncheckedCreateInput = {
  id?: number
  name: string
  description?: string | null
  price: number
  categoryId: number
  createdAt?: Date | string
  orderItems?: Prisma.OrderItemUncheckedCreateNestedManyWithoutItemInput
}

export type ItemUpdateInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  price?: Prisma.FloatFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  category?: Prisma.CategoryUpdateOneRequiredWithoutItemsNestedInput
  orderItems?: Prisma.OrderItemUpdateManyWithoutItemNestedInput
}

export type ItemUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  price?: Prisma.FloatFieldUpdateOperationsInput | number
  categoryId?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  orderItems?: Prisma.OrderItemUncheckedUpdateManyWithoutItemNestedInput
}

export type ItemCreateManyInput = {
  id?: number
  name: string
  description?: string | null
  price: number
  categoryId: number
  createdAt?: Date | string
}

export type ItemUpdateManyMutationInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  price?: Prisma.FloatFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ItemUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  price?: Prisma.FloatFieldUpdateOperationsInput | number
  categoryId?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ItemListRelationFilter = {
  every?: Prisma.ItemWhereInput
  some?: Prisma.ItemWhereInput
  none?: Prisma.ItemWhereInput
}

export type ItemOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type ItemCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrder
  price?: Prisma.SortOrder
  categoryId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type ItemAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  price?: Prisma.SortOrder
  categoryId?: Prisma.SortOrder
}

export type ItemMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrder
  price?: Prisma.SortOrder
  categoryId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type ItemMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrder
  price?: Prisma.SortOrder
  categoryId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type ItemSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  price?: Prisma.SortOrder
  categoryId?: Prisma.SortOrder
}

export type ItemScalarRelationFilter = {
  is?: Prisma.ItemWhereInput
  isNot?: Prisma.ItemWhereInput
}

export type ItemCreateNestedManyWithoutCategoryInput = {
  create?: Prisma.XOR<Prisma.ItemCreateWithoutCategoryInput, Prisma.ItemUncheckedCreateWithoutCategoryInput> | Prisma.ItemCreateWithoutCategoryInput[] | Prisma.ItemUncheckedCreateWithoutCategoryInput[]
  connectOrCreate?: Prisma.ItemCreateOrConnectWithoutCategoryInput | Prisma.ItemCreateOrConnectWithoutCategoryInput[]
  createMany?: Prisma.ItemCreateManyCategoryInputEnvelope
  connect?: Prisma.ItemWhereUniqueInput | Prisma.ItemWhereUniqueInput[]
}

export type ItemUncheckedCreateNestedManyWithoutCategoryInput = {
  create?: Prisma.XOR<Prisma.ItemCreateWithoutCategoryInput, Prisma.ItemUncheckedCreateWithoutCategoryInput> | Prisma.ItemCreateWithoutCategoryInput[] | Prisma.ItemUncheckedCreateWithoutCategoryInput[]
  connectOrCreate?: Prisma.ItemCreateOrConnectWithoutCategoryInput | Prisma.ItemCreateOrConnectWithoutCategoryInput[]
  createMany?: Prisma.ItemCreateManyCategoryInputEnvelope
  connect?: Prisma.ItemWhereUniqueInput | Prisma.ItemWhereUniqueInput[]
}

export type ItemUpdateManyWithoutCategoryNestedInput = {
  create?: Prisma.XOR<Prisma.ItemCreateWithoutCategoryInput, Prisma.ItemUncheckedCreateWithoutCategoryInput> | Prisma.ItemCreateWithoutCategoryInput[] | Prisma.ItemUncheckedCreateWithoutCategoryInput[]
  connectOrCreate?: Prisma.ItemCreateOrConnectWithoutCategoryInput | Prisma.ItemCreateOrConnectWithoutCategoryInput[]
  upsert?: Prisma.ItemUpsertWithWhereUniqueWithoutCategoryInput | Prisma.ItemUpsertWithWhereUniqueWithoutCategoryInput[]
  createMany?: Prisma.ItemCreateManyCategoryInputEnvelope
  set?: Prisma.ItemWhereUniqueInput | Prisma.ItemWhereUniqueInput[]
  disconnect?: Prisma.ItemWhereUniqueInput | Prisma.ItemWhereUniqueInput[]
  delete?: Prisma.ItemWhereUniqueInput | Prisma.ItemWhereUniqueInput[]
  connect?: Prisma.ItemWhereUniqueInput | Prisma.ItemWhereUniqueInput[]
  update?: Prisma.ItemUpdateWithWhereUniqueWithoutCategoryInput | Prisma.ItemUpdateWithWhereUniqueWithoutCategoryInput[]
  updateMany?: Prisma.ItemUpdateManyWithWhereWithoutCategoryInput | Prisma.ItemUpdateManyWithWhereWithoutCategoryInput[]
  deleteMany?: Prisma.ItemScalarWhereInput | Prisma.ItemScalarWhereInput[]
}

export type ItemUncheckedUpdateManyWithoutCategoryNestedInput = {
  create?: Prisma.XOR<Prisma.ItemCreateWithoutCategoryInput, Prisma.ItemUncheckedCreateWithoutCategoryInput> | Prisma.ItemCreateWithoutCategoryInput[] | Prisma.ItemUncheckedCreateWithoutCategoryInput[]
  connectOrCreate?: Prisma.ItemCreateOrConnectWithoutCategoryInput | Prisma.ItemCreateOrConnectWithoutCategoryInput[]
  upsert?: Prisma.ItemUpsertWithWhereUniqueWithoutCategoryInput | Prisma.ItemUpsertWithWhereUniqueWithoutCategoryInput[]
  createMany?: Prisma.ItemCreateManyCategoryInputEnvelope
  set?: Prisma.ItemWhereUniqueInput | Prisma.ItemWhereUniqueInput[]
  disconnect?: Prisma.ItemWhereUniqueInput | Prisma.ItemWhereUniqueInput[]
  delete?: Prisma.ItemWhereUniqueInput | Prisma.ItemWhereUniqueInput[]
  connect?: Prisma.ItemWhereUniqueInput | Prisma.ItemWhereUniqueInput[]
  update?: Prisma.ItemUpdateWithWhereUniqueWithoutCategoryInput | Prisma.ItemUpdateWithWhereUniqueWithoutCategoryInput[]
  updateMany?: Prisma.ItemUpdateManyWithWhereWithoutCategoryInput | Prisma.ItemUpdateManyWithWhereWithoutCategoryInput[]
  deleteMany?: Prisma.ItemScalarWhereInput | Prisma.ItemScalarWhereInput[]
}

export type FloatFieldUpdateOperationsInput = {
  set?: number
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}

export type ItemCreateNestedOneWithoutOrderItemsInput = {
  create?: Prisma.XOR<Prisma.ItemCreateWithoutOrderItemsInput, Prisma.ItemUncheckedCreateWithoutOrderItemsInput>
  connectOrCreate?: Prisma.ItemCreateOrConnectWithoutOrderItemsInput
  connect?: Prisma.ItemWhereUniqueInput
}

export type ItemUpdateOneRequiredWithoutOrderItemsNestedInput = {
  create?: Prisma.XOR<Prisma.ItemCreateWithoutOrderItemsInput, Prisma.ItemUncheckedCreateWithoutOrderItemsInput>
  connectOrCreate?: Prisma.ItemCreateOrConnectWithoutOrderItemsInput
  upsert?: Prisma.ItemUpsertWithoutOrderItemsInput
  connect?: Prisma.ItemWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.ItemUpdateToOneWithWhereWithoutOrderItemsInput, Prisma.ItemUpdateWithoutOrderItemsInput>, Prisma.ItemUncheckedUpdateWithoutOrderItemsInput>
}

export type ItemCreateWithoutCategoryInput = {
  name: string
  description?: string | null
  price: number
  createdAt?: Date | string
  orderItems?: Prisma.OrderItemCreateNestedManyWithoutItemInput
}

export type ItemUncheckedCreateWithoutCategoryInput = {
  id?: number
  name: string
  description?: string | null
  price: number
  createdAt?: Date | string
  orderItems?: Prisma.OrderItemUncheckedCreateNestedManyWithoutItemInput
}

export type ItemCreateOrConnectWithoutCategoryInput = {
  where: Prisma.ItemWhereUniqueInput
  create: Prisma.XOR<Prisma.ItemCreateWithoutCategoryInput, Prisma.ItemUncheckedCreateWithoutCategoryInput>
}

export type ItemCreateManyCategoryInputEnvelope = {
  data: Prisma.ItemCreateManyCategoryInput | Prisma.ItemCreateManyCategoryInput[]
  skipDuplicates?: boolean
}

export type ItemUpsertWithWhereUniqueWithoutCategoryInput = {
  where: Prisma.ItemWhereUniqueInput
  update: Prisma.XOR<Prisma.ItemUpdateWithoutCategoryInput, Prisma.ItemUncheckedUpdateWithoutCategoryInput>
  create: Prisma.XOR<Prisma.ItemCreateWithoutCategoryInput, Prisma.ItemUncheckedCreateWithoutCategoryInput>
}

export type ItemUpdateWithWhereUniqueWithoutCategoryInput = {
  where: Prisma.ItemWhereUniqueInput
  data: Prisma.XOR<Prisma.ItemUpdateWithoutCategoryInput, Prisma.ItemUncheckedUpdateWithoutCategoryInput>
}

export type ItemUpdateManyWithWhereWithoutCategoryInput = {
  where: Prisma.ItemScalarWhereInput
  data: Prisma.XOR<Prisma.ItemUpdateManyMutationInput, Prisma.ItemUncheckedUpdateManyWithoutCategoryInput>
}

export type ItemScalarWhereInput = {
  AND?: Prisma.ItemScalarWhereInput | Prisma.ItemScalarWhereInput[]
  OR?: Prisma.ItemScalarWhereInput[]
  NOT?: Prisma.ItemScalarWhereInput | Prisma.ItemScalarWhereInput[]
  id?: Prisma.IntFilter<"Item"> | number
  name?: Prisma.StringFilter<"Item"> | string
  description?: Prisma.StringNullableFilter<"Item"> | string | null
  price?: Prisma.FloatFilter<"Item"> | number
  categoryId?: Prisma.IntFilter<"Item"> | number
  createdAt?: Prisma.DateTimeFilter<"Item"> | Date | string
}

export type ItemCreateWithoutOrderItemsInput = {
  name: string
  description?: string | null
  price: number
  createdAt?: Date | string
  category: Prisma.CategoryCreateNestedOneWithoutItemsInput
}

export type ItemUncheckedCreateWithoutOrderItemsInput = {
  id?: number
  name: string
  description?: string | null
  price: number
  categoryId: number
  createdAt?: Date | string
}

export type ItemCreateOrConnectWithoutOrderItemsInput = {
  where: Prisma.ItemWhereUniqueInput
  create: Prisma.XOR<Prisma.ItemCreateWithoutOrderItemsInput, Prisma.ItemUncheckedCreateWithoutOrderItemsInput>
}

export type ItemUpsertWithoutOrderItemsInput = {
  update: Prisma.XOR<Prisma.ItemUpdateWithoutOrderItemsInput, Prisma.ItemUncheckedUpdateWithoutOrderItemsInput>
  create: Prisma.XOR<Prisma.ItemCreateWithoutOrderItemsInput, Prisma.ItemUncheckedCreateWithoutOrderItemsInput>
  where?: Prisma.ItemWhereInput
}

export type ItemUpdateToOneWithWhereWithoutOrderItemsInput = {
  where?: Prisma.ItemWhereInput
  data: Prisma.XOR<Prisma.ItemUpdateWithoutOrderItemsInput, Prisma.ItemUncheckedUpdateWithoutOrderItemsInput>
}

export type ItemUpdateWithoutOrderItemsInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  price?: Prisma.FloatFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  category?: Prisma.CategoryUpdateOneRequiredWithoutItemsNestedInput
}

export type ItemUncheckedUpdateWithoutOrderItemsInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  price?: Prisma.FloatFieldUpdateOperationsInput | number
  categoryId?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ItemCreateManyCategoryInput = {
  id?: number
  name: string
  description?: string | null
  price: number
  createdAt?: Date | string
}

export type ItemUpdateWithoutCategoryInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  price?: Prisma.FloatFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  orderItems?: Prisma.OrderItemUpdateManyWithoutItemNestedInput
}

export type ItemUncheckedUpdateWithoutCategoryInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  price?: Prisma.FloatFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  orderItems?: Prisma.OrderItemUncheckedUpdateManyWithoutItemNestedInput
}

export type ItemUncheckedUpdateManyWithoutCategoryInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  price?: Prisma.FloatFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}


/**
 * Count Type ItemCountOutputType
 */

export type ItemCountOutputType = {
  orderItems: number
}

export type ItemCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  orderItems?: boolean | ItemCountOutputTypeCountOrderItemsArgs
}

/**
 * ItemCountOutputType without action
 */
export type ItemCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ItemCountOutputType
   */
  select?: Prisma.ItemCountOutputTypeSelect<ExtArgs> | null
}

/**
 * ItemCountOutputType without action
 */
export type ItemCountOutputTypeCountOrderItemsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.OrderItemWhereInput
}


export type ItemSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  description?: boolean
  price?: boolean
  categoryId?: boolean
  createdAt?: boolean
  category?: boolean | Prisma.CategoryDefaultArgs<ExtArgs>
  orderItems?: boolean | Prisma.Item$orderItemsArgs<ExtArgs>
  _count?: boolean | Prisma.ItemCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["item"]>

export type ItemSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  description?: boolean
  price?: boolean
  categoryId?: boolean
  createdAt?: boolean
  category?: boolean | Prisma.CategoryDefaultArgs<ExtArgs>
}, ExtArgs["result"]["item"]>

export type ItemSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  description?: boolean
  price?: boolean
  categoryId?: boolean
  createdAt?: boolean
  category?: boolean | Prisma.CategoryDefaultArgs<ExtArgs>
}, ExtArgs["result"]["item"]>

export type ItemSelectScalar = {
  id?: boolean
  name?: boolean
  description?: boolean
  price?: boolean
  categoryId?: boolean
  createdAt?: boolean
}

export type ItemOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "name" | "description" | "price" | "categoryId" | "createdAt", ExtArgs["result"]["item"]>
export type ItemInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  category?: boolean | Prisma.CategoryDefaultArgs<ExtArgs>
  orderItems?: boolean | Prisma.Item$orderItemsArgs<ExtArgs>
  _count?: boolean | Prisma.ItemCountOutputTypeDefaultArgs<ExtArgs>
}
export type ItemIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  category?: boolean | Prisma.CategoryDefaultArgs<ExtArgs>
}
export type ItemIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  category?: boolean | Prisma.CategoryDefaultArgs<ExtArgs>
}

export type $ItemPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Item"
  objects: {
    category: Prisma.$CategoryPayload<ExtArgs>
    orderItems: Prisma.$OrderItemPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    name: string
    description: string | null
    price: number
    categoryId: number
    createdAt: Date
  }, ExtArgs["result"]["item"]>
  composites: {}
}

export type ItemGetPayload<S extends boolean | null | undefined | ItemDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$ItemPayload, S>

export type ItemCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ItemFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: ItemCountAggregateInputType | true
  }

export interface ItemDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Item'], meta: { name: 'Item' } }
  /**
   * Find zero or one Item that matches the filter.
   * @param {ItemFindUniqueArgs} args - Arguments to find a Item
   * @example
   * // Get one Item
   * const item = await prisma.item.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ItemFindUniqueArgs>(args: Prisma.SelectSubset<T, ItemFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ItemClient<runtime.Types.Result.GetResult<Prisma.$ItemPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Item that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ItemFindUniqueOrThrowArgs} args - Arguments to find a Item
   * @example
   * // Get one Item
   * const item = await prisma.item.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ItemFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ItemFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ItemClient<runtime.Types.Result.GetResult<Prisma.$ItemPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Item that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ItemFindFirstArgs} args - Arguments to find a Item
   * @example
   * // Get one Item
   * const item = await prisma.item.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ItemFindFirstArgs>(args?: Prisma.SelectSubset<T, ItemFindFirstArgs<ExtArgs>>): Prisma.Prisma__ItemClient<runtime.Types.Result.GetResult<Prisma.$ItemPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Item that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ItemFindFirstOrThrowArgs} args - Arguments to find a Item
   * @example
   * // Get one Item
   * const item = await prisma.item.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ItemFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ItemFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ItemClient<runtime.Types.Result.GetResult<Prisma.$ItemPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Items that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ItemFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Items
   * const items = await prisma.item.findMany()
   * 
   * // Get first 10 Items
   * const items = await prisma.item.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const itemWithIdOnly = await prisma.item.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends ItemFindManyArgs>(args?: Prisma.SelectSubset<T, ItemFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Item.
   * @param {ItemCreateArgs} args - Arguments to create a Item.
   * @example
   * // Create one Item
   * const Item = await prisma.item.create({
   *   data: {
   *     // ... data to create a Item
   *   }
   * })
   * 
   */
  create<T extends ItemCreateArgs>(args: Prisma.SelectSubset<T, ItemCreateArgs<ExtArgs>>): Prisma.Prisma__ItemClient<runtime.Types.Result.GetResult<Prisma.$ItemPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Items.
   * @param {ItemCreateManyArgs} args - Arguments to create many Items.
   * @example
   * // Create many Items
   * const item = await prisma.item.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends ItemCreateManyArgs>(args?: Prisma.SelectSubset<T, ItemCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Items and returns the data saved in the database.
   * @param {ItemCreateManyAndReturnArgs} args - Arguments to create many Items.
   * @example
   * // Create many Items
   * const item = await prisma.item.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Items and only return the `id`
   * const itemWithIdOnly = await prisma.item.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends ItemCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, ItemCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ItemPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Item.
   * @param {ItemDeleteArgs} args - Arguments to delete one Item.
   * @example
   * // Delete one Item
   * const Item = await prisma.item.delete({
   *   where: {
   *     // ... filter to delete one Item
   *   }
   * })
   * 
   */
  delete<T extends ItemDeleteArgs>(args: Prisma.SelectSubset<T, ItemDeleteArgs<ExtArgs>>): Prisma.Prisma__ItemClient<runtime.Types.Result.GetResult<Prisma.$ItemPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Item.
   * @param {ItemUpdateArgs} args - Arguments to update one Item.
   * @example
   * // Update one Item
   * const item = await prisma.item.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ItemUpdateArgs>(args: Prisma.SelectSubset<T, ItemUpdateArgs<ExtArgs>>): Prisma.Prisma__ItemClient<runtime.Types.Result.GetResult<Prisma.$ItemPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Items.
   * @param {ItemDeleteManyArgs} args - Arguments to filter Items to delete.
   * @example
   * // Delete a few Items
   * const { count } = await prisma.item.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ItemDeleteManyArgs>(args?: Prisma.SelectSubset<T, ItemDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Items.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ItemUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Items
   * const item = await prisma.item.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ItemUpdateManyArgs>(args: Prisma.SelectSubset<T, ItemUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Items and returns the data updated in the database.
   * @param {ItemUpdateManyAndReturnArgs} args - Arguments to update many Items.
   * @example
   * // Update many Items
   * const item = await prisma.item.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Items and only return the `id`
   * const itemWithIdOnly = await prisma.item.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends ItemUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, ItemUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ItemPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Item.
   * @param {ItemUpsertArgs} args - Arguments to update or create a Item.
   * @example
   * // Update or create a Item
   * const item = await prisma.item.upsert({
   *   create: {
   *     // ... data to create a Item
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Item we want to update
   *   }
   * })
   */
  upsert<T extends ItemUpsertArgs>(args: Prisma.SelectSubset<T, ItemUpsertArgs<ExtArgs>>): Prisma.Prisma__ItemClient<runtime.Types.Result.GetResult<Prisma.$ItemPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Items.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ItemCountArgs} args - Arguments to filter Items to count.
   * @example
   * // Count the number of Items
   * const count = await prisma.item.count({
   *   where: {
   *     // ... the filter for the Items we want to count
   *   }
   * })
  **/
  count<T extends ItemCountArgs>(
    args?: Prisma.Subset<T, ItemCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ItemCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Item.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ItemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ItemAggregateArgs>(args: Prisma.Subset<T, ItemAggregateArgs>): Prisma.PrismaPromise<GetItemAggregateType<T>>

  /**
   * Group by Item.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ItemGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ItemGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ItemGroupByArgs['orderBy'] }
      : { orderBy?: ItemGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ItemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetItemGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Item model
 */
readonly fields: ItemFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Item.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ItemClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  category<T extends Prisma.CategoryDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.CategoryDefaultArgs<ExtArgs>>): Prisma.Prisma__CategoryClient<runtime.Types.Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  orderItems<T extends Prisma.Item$orderItemsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Item$orderItemsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$OrderItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Item model
 */
export interface ItemFieldRefs {
  readonly id: Prisma.FieldRef<"Item", 'Int'>
  readonly name: Prisma.FieldRef<"Item", 'String'>
  readonly description: Prisma.FieldRef<"Item", 'String'>
  readonly price: Prisma.FieldRef<"Item", 'Float'>
  readonly categoryId: Prisma.FieldRef<"Item", 'Int'>
  readonly createdAt: Prisma.FieldRef<"Item", 'DateTime'>
}
    

// Custom InputTypes
/**
 * Item findUnique
 */
export type ItemFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Item
   */
  select?: Prisma.ItemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Item
   */
  omit?: Prisma.ItemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ItemInclude<ExtArgs> | null
  /**
   * Filter, which Item to fetch.
   */
  where: Prisma.ItemWhereUniqueInput
}

/**
 * Item findUniqueOrThrow
 */
export type ItemFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Item
   */
  select?: Prisma.ItemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Item
   */
  omit?: Prisma.ItemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ItemInclude<ExtArgs> | null
  /**
   * Filter, which Item to fetch.
   */
  where: Prisma.ItemWhereUniqueInput
}

/**
 * Item findFirst
 */
export type ItemFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Item
   */
  select?: Prisma.ItemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Item
   */
  omit?: Prisma.ItemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ItemInclude<ExtArgs> | null
  /**
   * Filter, which Item to fetch.
   */
  where?: Prisma.ItemWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Items to fetch.
   */
  orderBy?: Prisma.ItemOrderByWithRelationInput | Prisma.ItemOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Items.
   */
  cursor?: Prisma.ItemWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Items from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Items.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Items.
   */
  distinct?: Prisma.ItemScalarFieldEnum | Prisma.ItemScalarFieldEnum[]
}

/**
 * Item findFirstOrThrow
 */
export type ItemFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Item
   */
  select?: Prisma.ItemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Item
   */
  omit?: Prisma.ItemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ItemInclude<ExtArgs> | null
  /**
   * Filter, which Item to fetch.
   */
  where?: Prisma.ItemWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Items to fetch.
   */
  orderBy?: Prisma.ItemOrderByWithRelationInput | Prisma.ItemOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Items.
   */
  cursor?: Prisma.ItemWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Items from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Items.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Items.
   */
  distinct?: Prisma.ItemScalarFieldEnum | Prisma.ItemScalarFieldEnum[]
}

/**
 * Item findMany
 */
export type ItemFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Item
   */
  select?: Prisma.ItemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Item
   */
  omit?: Prisma.ItemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ItemInclude<ExtArgs> | null
  /**
   * Filter, which Items to fetch.
   */
  where?: Prisma.ItemWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Items to fetch.
   */
  orderBy?: Prisma.ItemOrderByWithRelationInput | Prisma.ItemOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Items.
   */
  cursor?: Prisma.ItemWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Items from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Items.
   */
  skip?: number
  distinct?: Prisma.ItemScalarFieldEnum | Prisma.ItemScalarFieldEnum[]
}

/**
 * Item create
 */
export type ItemCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Item
   */
  select?: Prisma.ItemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Item
   */
  omit?: Prisma.ItemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ItemInclude<ExtArgs> | null
  /**
   * The data needed to create a Item.
   */
  data: Prisma.XOR<Prisma.ItemCreateInput, Prisma.ItemUncheckedCreateInput>
}

/**
 * Item createMany
 */
export type ItemCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Items.
   */
  data: Prisma.ItemCreateManyInput | Prisma.ItemCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Item createManyAndReturn
 */
export type ItemCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Item
   */
  select?: Prisma.ItemSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Item
   */
  omit?: Prisma.ItemOmit<ExtArgs> | null
  /**
   * The data used to create many Items.
   */
  data: Prisma.ItemCreateManyInput | Prisma.ItemCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ItemIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Item update
 */
export type ItemUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Item
   */
  select?: Prisma.ItemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Item
   */
  omit?: Prisma.ItemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ItemInclude<ExtArgs> | null
  /**
   * The data needed to update a Item.
   */
  data: Prisma.XOR<Prisma.ItemUpdateInput, Prisma.ItemUncheckedUpdateInput>
  /**
   * Choose, which Item to update.
   */
  where: Prisma.ItemWhereUniqueInput
}

/**
 * Item updateMany
 */
export type ItemUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Items.
   */
  data: Prisma.XOR<Prisma.ItemUpdateManyMutationInput, Prisma.ItemUncheckedUpdateManyInput>
  /**
   * Filter which Items to update
   */
  where?: Prisma.ItemWhereInput
  /**
   * Limit how many Items to update.
   */
  limit?: number
}

/**
 * Item updateManyAndReturn
 */
export type ItemUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Item
   */
  select?: Prisma.ItemSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Item
   */
  omit?: Prisma.ItemOmit<ExtArgs> | null
  /**
   * The data used to update Items.
   */
  data: Prisma.XOR<Prisma.ItemUpdateManyMutationInput, Prisma.ItemUncheckedUpdateManyInput>
  /**
   * Filter which Items to update
   */
  where?: Prisma.ItemWhereInput
  /**
   * Limit how many Items to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ItemIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Item upsert
 */
export type ItemUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Item
   */
  select?: Prisma.ItemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Item
   */
  omit?: Prisma.ItemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ItemInclude<ExtArgs> | null
  /**
   * The filter to search for the Item to update in case it exists.
   */
  where: Prisma.ItemWhereUniqueInput
  /**
   * In case the Item found by the `where` argument doesn't exist, create a new Item with this data.
   */
  create: Prisma.XOR<Prisma.ItemCreateInput, Prisma.ItemUncheckedCreateInput>
  /**
   * In case the Item was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ItemUpdateInput, Prisma.ItemUncheckedUpdateInput>
}

/**
 * Item delete
 */
export type ItemDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Item
   */
  select?: Prisma.ItemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Item
   */
  omit?: Prisma.ItemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ItemInclude<ExtArgs> | null
  /**
   * Filter which Item to delete.
   */
  where: Prisma.ItemWhereUniqueInput
}

/**
 * Item deleteMany
 */
export type ItemDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Items to delete
   */
  where?: Prisma.ItemWhereInput
  /**
   * Limit how many Items to delete.
   */
  limit?: number
}

/**
 * Item.orderItems
 */
export type Item$orderItemsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the OrderItem
   */
  select?: Prisma.OrderItemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the OrderItem
   */
  omit?: Prisma.OrderItemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OrderItemInclude<ExtArgs> | null
  where?: Prisma.OrderItemWhereInput
  orderBy?: Prisma.OrderItemOrderByWithRelationInput | Prisma.OrderItemOrderByWithRelationInput[]
  cursor?: Prisma.OrderItemWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.OrderItemScalarFieldEnum | Prisma.OrderItemScalarFieldEnum[]
}

/**
 * Item without action
 */
export type ItemDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Item
   */
  select?: Prisma.ItemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Item
   */
  omit?: Prisma.ItemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ItemInclude<ExtArgs> | null
}

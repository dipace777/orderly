
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `TableSession` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model TableSession
 * 
 */
export type TableSessionModel = runtime.Types.Result.DefaultSelection<Prisma.$TableSessionPayload>

export type AggregateTableSession = {
  _count: TableSessionCountAggregateOutputType | null
  _avg: TableSessionAvgAggregateOutputType | null
  _sum: TableSessionSumAggregateOutputType | null
  _min: TableSessionMinAggregateOutputType | null
  _max: TableSessionMaxAggregateOutputType | null
}

export type TableSessionAvgAggregateOutputType = {
  id: number | null
  tableId: number | null
}

export type TableSessionSumAggregateOutputType = {
  id: number | null
  tableId: number | null
}

export type TableSessionMinAggregateOutputType = {
  id: number | null
  tableId: number | null
  customerName: string | null
  startTime: Date | null
  endTime: Date | null
}

export type TableSessionMaxAggregateOutputType = {
  id: number | null
  tableId: number | null
  customerName: string | null
  startTime: Date | null
  endTime: Date | null
}

export type TableSessionCountAggregateOutputType = {
  id: number
  tableId: number
  customerName: number
  startTime: number
  endTime: number
  _all: number
}


export type TableSessionAvgAggregateInputType = {
  id?: true
  tableId?: true
}

export type TableSessionSumAggregateInputType = {
  id?: true
  tableId?: true
}

export type TableSessionMinAggregateInputType = {
  id?: true
  tableId?: true
  customerName?: true
  startTime?: true
  endTime?: true
}

export type TableSessionMaxAggregateInputType = {
  id?: true
  tableId?: true
  customerName?: true
  startTime?: true
  endTime?: true
}

export type TableSessionCountAggregateInputType = {
  id?: true
  tableId?: true
  customerName?: true
  startTime?: true
  endTime?: true
  _all?: true
}

export type TableSessionAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which TableSession to aggregate.
   */
  where?: Prisma.TableSessionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TableSessions to fetch.
   */
  orderBy?: Prisma.TableSessionOrderByWithRelationInput | Prisma.TableSessionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.TableSessionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TableSessions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TableSessions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned TableSessions
  **/
  _count?: true | TableSessionCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: TableSessionAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: TableSessionSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: TableSessionMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: TableSessionMaxAggregateInputType
}

export type GetTableSessionAggregateType<T extends TableSessionAggregateArgs> = {
      [P in keyof T & keyof AggregateTableSession]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateTableSession[P]>
    : Prisma.GetScalarType<T[P], AggregateTableSession[P]>
}




export type TableSessionGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.TableSessionWhereInput
  orderBy?: Prisma.TableSessionOrderByWithAggregationInput | Prisma.TableSessionOrderByWithAggregationInput[]
  by: Prisma.TableSessionScalarFieldEnum[] | Prisma.TableSessionScalarFieldEnum
  having?: Prisma.TableSessionScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: TableSessionCountAggregateInputType | true
  _avg?: TableSessionAvgAggregateInputType
  _sum?: TableSessionSumAggregateInputType
  _min?: TableSessionMinAggregateInputType
  _max?: TableSessionMaxAggregateInputType
}

export type TableSessionGroupByOutputType = {
  id: number
  tableId: number
  customerName: string | null
  startTime: Date
  endTime: Date | null
  _count: TableSessionCountAggregateOutputType | null
  _avg: TableSessionAvgAggregateOutputType | null
  _sum: TableSessionSumAggregateOutputType | null
  _min: TableSessionMinAggregateOutputType | null
  _max: TableSessionMaxAggregateOutputType | null
}

type GetTableSessionGroupByPayload<T extends TableSessionGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<TableSessionGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof TableSessionGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], TableSessionGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], TableSessionGroupByOutputType[P]>
      }
    >
  > 



export type TableSessionWhereInput = {
  AND?: Prisma.TableSessionWhereInput | Prisma.TableSessionWhereInput[]
  OR?: Prisma.TableSessionWhereInput[]
  NOT?: Prisma.TableSessionWhereInput | Prisma.TableSessionWhereInput[]
  id?: Prisma.IntFilter<"TableSession"> | number
  tableId?: Prisma.IntFilter<"TableSession"> | number
  customerName?: Prisma.StringNullableFilter<"TableSession"> | string | null
  startTime?: Prisma.DateTimeFilter<"TableSession"> | Date | string
  endTime?: Prisma.DateTimeNullableFilter<"TableSession"> | Date | string | null
  table?: Prisma.XOR<Prisma.TableScalarRelationFilter, Prisma.TableWhereInput>
  orders?: Prisma.OrderListRelationFilter
}

export type TableSessionOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  tableId?: Prisma.SortOrder
  customerName?: Prisma.SortOrderInput | Prisma.SortOrder
  startTime?: Prisma.SortOrder
  endTime?: Prisma.SortOrderInput | Prisma.SortOrder
  table?: Prisma.TableOrderByWithRelationInput
  orders?: Prisma.OrderOrderByRelationAggregateInput
}

export type TableSessionWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  AND?: Prisma.TableSessionWhereInput | Prisma.TableSessionWhereInput[]
  OR?: Prisma.TableSessionWhereInput[]
  NOT?: Prisma.TableSessionWhereInput | Prisma.TableSessionWhereInput[]
  tableId?: Prisma.IntFilter<"TableSession"> | number
  customerName?: Prisma.StringNullableFilter<"TableSession"> | string | null
  startTime?: Prisma.DateTimeFilter<"TableSession"> | Date | string
  endTime?: Prisma.DateTimeNullableFilter<"TableSession"> | Date | string | null
  table?: Prisma.XOR<Prisma.TableScalarRelationFilter, Prisma.TableWhereInput>
  orders?: Prisma.OrderListRelationFilter
}, "id">

export type TableSessionOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  tableId?: Prisma.SortOrder
  customerName?: Prisma.SortOrderInput | Prisma.SortOrder
  startTime?: Prisma.SortOrder
  endTime?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.TableSessionCountOrderByAggregateInput
  _avg?: Prisma.TableSessionAvgOrderByAggregateInput
  _max?: Prisma.TableSessionMaxOrderByAggregateInput
  _min?: Prisma.TableSessionMinOrderByAggregateInput
  _sum?: Prisma.TableSessionSumOrderByAggregateInput
}

export type TableSessionScalarWhereWithAggregatesInput = {
  AND?: Prisma.TableSessionScalarWhereWithAggregatesInput | Prisma.TableSessionScalarWhereWithAggregatesInput[]
  OR?: Prisma.TableSessionScalarWhereWithAggregatesInput[]
  NOT?: Prisma.TableSessionScalarWhereWithAggregatesInput | Prisma.TableSessionScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"TableSession"> | number
  tableId?: Prisma.IntWithAggregatesFilter<"TableSession"> | number
  customerName?: Prisma.StringNullableWithAggregatesFilter<"TableSession"> | string | null
  startTime?: Prisma.DateTimeWithAggregatesFilter<"TableSession"> | Date | string
  endTime?: Prisma.DateTimeNullableWithAggregatesFilter<"TableSession"> | Date | string | null
}

export type TableSessionCreateInput = {
  customerName?: string | null
  startTime?: Date | string
  endTime?: Date | string | null
  table: Prisma.TableCreateNestedOneWithoutSessionsInput
  orders?: Prisma.OrderCreateNestedManyWithoutSessionInput
}

export type TableSessionUncheckedCreateInput = {
  id?: number
  tableId: number
  customerName?: string | null
  startTime?: Date | string
  endTime?: Date | string | null
  orders?: Prisma.OrderUncheckedCreateNestedManyWithoutSessionInput
}

export type TableSessionUpdateInput = {
  customerName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  startTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endTime?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  table?: Prisma.TableUpdateOneRequiredWithoutSessionsNestedInput
  orders?: Prisma.OrderUpdateManyWithoutSessionNestedInput
}

export type TableSessionUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  tableId?: Prisma.IntFieldUpdateOperationsInput | number
  customerName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  startTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endTime?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  orders?: Prisma.OrderUncheckedUpdateManyWithoutSessionNestedInput
}

export type TableSessionCreateManyInput = {
  id?: number
  tableId: number
  customerName?: string | null
  startTime?: Date | string
  endTime?: Date | string | null
}

export type TableSessionUpdateManyMutationInput = {
  customerName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  startTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endTime?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type TableSessionUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  tableId?: Prisma.IntFieldUpdateOperationsInput | number
  customerName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  startTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endTime?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type TableSessionListRelationFilter = {
  every?: Prisma.TableSessionWhereInput
  some?: Prisma.TableSessionWhereInput
  none?: Prisma.TableSessionWhereInput
}

export type TableSessionOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type TableSessionCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  tableId?: Prisma.SortOrder
  customerName?: Prisma.SortOrder
  startTime?: Prisma.SortOrder
  endTime?: Prisma.SortOrder
}

export type TableSessionAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  tableId?: Prisma.SortOrder
}

export type TableSessionMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  tableId?: Prisma.SortOrder
  customerName?: Prisma.SortOrder
  startTime?: Prisma.SortOrder
  endTime?: Prisma.SortOrder
}

export type TableSessionMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  tableId?: Prisma.SortOrder
  customerName?: Prisma.SortOrder
  startTime?: Prisma.SortOrder
  endTime?: Prisma.SortOrder
}

export type TableSessionSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  tableId?: Prisma.SortOrder
}

export type TableSessionScalarRelationFilter = {
  is?: Prisma.TableSessionWhereInput
  isNot?: Prisma.TableSessionWhereInput
}

export type TableSessionCreateNestedManyWithoutTableInput = {
  create?: Prisma.XOR<Prisma.TableSessionCreateWithoutTableInput, Prisma.TableSessionUncheckedCreateWithoutTableInput> | Prisma.TableSessionCreateWithoutTableInput[] | Prisma.TableSessionUncheckedCreateWithoutTableInput[]
  connectOrCreate?: Prisma.TableSessionCreateOrConnectWithoutTableInput | Prisma.TableSessionCreateOrConnectWithoutTableInput[]
  createMany?: Prisma.TableSessionCreateManyTableInputEnvelope
  connect?: Prisma.TableSessionWhereUniqueInput | Prisma.TableSessionWhereUniqueInput[]
}

export type TableSessionUncheckedCreateNestedManyWithoutTableInput = {
  create?: Prisma.XOR<Prisma.TableSessionCreateWithoutTableInput, Prisma.TableSessionUncheckedCreateWithoutTableInput> | Prisma.TableSessionCreateWithoutTableInput[] | Prisma.TableSessionUncheckedCreateWithoutTableInput[]
  connectOrCreate?: Prisma.TableSessionCreateOrConnectWithoutTableInput | Prisma.TableSessionCreateOrConnectWithoutTableInput[]
  createMany?: Prisma.TableSessionCreateManyTableInputEnvelope
  connect?: Prisma.TableSessionWhereUniqueInput | Prisma.TableSessionWhereUniqueInput[]
}

export type TableSessionUpdateManyWithoutTableNestedInput = {
  create?: Prisma.XOR<Prisma.TableSessionCreateWithoutTableInput, Prisma.TableSessionUncheckedCreateWithoutTableInput> | Prisma.TableSessionCreateWithoutTableInput[] | Prisma.TableSessionUncheckedCreateWithoutTableInput[]
  connectOrCreate?: Prisma.TableSessionCreateOrConnectWithoutTableInput | Prisma.TableSessionCreateOrConnectWithoutTableInput[]
  upsert?: Prisma.TableSessionUpsertWithWhereUniqueWithoutTableInput | Prisma.TableSessionUpsertWithWhereUniqueWithoutTableInput[]
  createMany?: Prisma.TableSessionCreateManyTableInputEnvelope
  set?: Prisma.TableSessionWhereUniqueInput | Prisma.TableSessionWhereUniqueInput[]
  disconnect?: Prisma.TableSessionWhereUniqueInput | Prisma.TableSessionWhereUniqueInput[]
  delete?: Prisma.TableSessionWhereUniqueInput | Prisma.TableSessionWhereUniqueInput[]
  connect?: Prisma.TableSessionWhereUniqueInput | Prisma.TableSessionWhereUniqueInput[]
  update?: Prisma.TableSessionUpdateWithWhereUniqueWithoutTableInput | Prisma.TableSessionUpdateWithWhereUniqueWithoutTableInput[]
  updateMany?: Prisma.TableSessionUpdateManyWithWhereWithoutTableInput | Prisma.TableSessionUpdateManyWithWhereWithoutTableInput[]
  deleteMany?: Prisma.TableSessionScalarWhereInput | Prisma.TableSessionScalarWhereInput[]
}

export type TableSessionUncheckedUpdateManyWithoutTableNestedInput = {
  create?: Prisma.XOR<Prisma.TableSessionCreateWithoutTableInput, Prisma.TableSessionUncheckedCreateWithoutTableInput> | Prisma.TableSessionCreateWithoutTableInput[] | Prisma.TableSessionUncheckedCreateWithoutTableInput[]
  connectOrCreate?: Prisma.TableSessionCreateOrConnectWithoutTableInput | Prisma.TableSessionCreateOrConnectWithoutTableInput[]
  upsert?: Prisma.TableSessionUpsertWithWhereUniqueWithoutTableInput | Prisma.TableSessionUpsertWithWhereUniqueWithoutTableInput[]
  createMany?: Prisma.TableSessionCreateManyTableInputEnvelope
  set?: Prisma.TableSessionWhereUniqueInput | Prisma.TableSessionWhereUniqueInput[]
  disconnect?: Prisma.TableSessionWhereUniqueInput | Prisma.TableSessionWhereUniqueInput[]
  delete?: Prisma.TableSessionWhereUniqueInput | Prisma.TableSessionWhereUniqueInput[]
  connect?: Prisma.TableSessionWhereUniqueInput | Prisma.TableSessionWhereUniqueInput[]
  update?: Prisma.TableSessionUpdateWithWhereUniqueWithoutTableInput | Prisma.TableSessionUpdateWithWhereUniqueWithoutTableInput[]
  updateMany?: Prisma.TableSessionUpdateManyWithWhereWithoutTableInput | Prisma.TableSessionUpdateManyWithWhereWithoutTableInput[]
  deleteMany?: Prisma.TableSessionScalarWhereInput | Prisma.TableSessionScalarWhereInput[]
}

export type TableSessionCreateNestedOneWithoutOrdersInput = {
  create?: Prisma.XOR<Prisma.TableSessionCreateWithoutOrdersInput, Prisma.TableSessionUncheckedCreateWithoutOrdersInput>
  connectOrCreate?: Prisma.TableSessionCreateOrConnectWithoutOrdersInput
  connect?: Prisma.TableSessionWhereUniqueInput
}

export type TableSessionUpdateOneRequiredWithoutOrdersNestedInput = {
  create?: Prisma.XOR<Prisma.TableSessionCreateWithoutOrdersInput, Prisma.TableSessionUncheckedCreateWithoutOrdersInput>
  connectOrCreate?: Prisma.TableSessionCreateOrConnectWithoutOrdersInput
  upsert?: Prisma.TableSessionUpsertWithoutOrdersInput
  connect?: Prisma.TableSessionWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.TableSessionUpdateToOneWithWhereWithoutOrdersInput, Prisma.TableSessionUpdateWithoutOrdersInput>, Prisma.TableSessionUncheckedUpdateWithoutOrdersInput>
}

export type TableSessionCreateWithoutTableInput = {
  customerName?: string | null
  startTime?: Date | string
  endTime?: Date | string | null
  orders?: Prisma.OrderCreateNestedManyWithoutSessionInput
}

export type TableSessionUncheckedCreateWithoutTableInput = {
  id?: number
  customerName?: string | null
  startTime?: Date | string
  endTime?: Date | string | null
  orders?: Prisma.OrderUncheckedCreateNestedManyWithoutSessionInput
}

export type TableSessionCreateOrConnectWithoutTableInput = {
  where: Prisma.TableSessionWhereUniqueInput
  create: Prisma.XOR<Prisma.TableSessionCreateWithoutTableInput, Prisma.TableSessionUncheckedCreateWithoutTableInput>
}

export type TableSessionCreateManyTableInputEnvelope = {
  data: Prisma.TableSessionCreateManyTableInput | Prisma.TableSessionCreateManyTableInput[]
  skipDuplicates?: boolean
}

export type TableSessionUpsertWithWhereUniqueWithoutTableInput = {
  where: Prisma.TableSessionWhereUniqueInput
  update: Prisma.XOR<Prisma.TableSessionUpdateWithoutTableInput, Prisma.TableSessionUncheckedUpdateWithoutTableInput>
  create: Prisma.XOR<Prisma.TableSessionCreateWithoutTableInput, Prisma.TableSessionUncheckedCreateWithoutTableInput>
}

export type TableSessionUpdateWithWhereUniqueWithoutTableInput = {
  where: Prisma.TableSessionWhereUniqueInput
  data: Prisma.XOR<Prisma.TableSessionUpdateWithoutTableInput, Prisma.TableSessionUncheckedUpdateWithoutTableInput>
}

export type TableSessionUpdateManyWithWhereWithoutTableInput = {
  where: Prisma.TableSessionScalarWhereInput
  data: Prisma.XOR<Prisma.TableSessionUpdateManyMutationInput, Prisma.TableSessionUncheckedUpdateManyWithoutTableInput>
}

export type TableSessionScalarWhereInput = {
  AND?: Prisma.TableSessionScalarWhereInput | Prisma.TableSessionScalarWhereInput[]
  OR?: Prisma.TableSessionScalarWhereInput[]
  NOT?: Prisma.TableSessionScalarWhereInput | Prisma.TableSessionScalarWhereInput[]
  id?: Prisma.IntFilter<"TableSession"> | number
  tableId?: Prisma.IntFilter<"TableSession"> | number
  customerName?: Prisma.StringNullableFilter<"TableSession"> | string | null
  startTime?: Prisma.DateTimeFilter<"TableSession"> | Date | string
  endTime?: Prisma.DateTimeNullableFilter<"TableSession"> | Date | string | null
}

export type TableSessionCreateWithoutOrdersInput = {
  customerName?: string | null
  startTime?: Date | string
  endTime?: Date | string | null
  table: Prisma.TableCreateNestedOneWithoutSessionsInput
}

export type TableSessionUncheckedCreateWithoutOrdersInput = {
  id?: number
  tableId: number
  customerName?: string | null
  startTime?: Date | string
  endTime?: Date | string | null
}

export type TableSessionCreateOrConnectWithoutOrdersInput = {
  where: Prisma.TableSessionWhereUniqueInput
  create: Prisma.XOR<Prisma.TableSessionCreateWithoutOrdersInput, Prisma.TableSessionUncheckedCreateWithoutOrdersInput>
}

export type TableSessionUpsertWithoutOrdersInput = {
  update: Prisma.XOR<Prisma.TableSessionUpdateWithoutOrdersInput, Prisma.TableSessionUncheckedUpdateWithoutOrdersInput>
  create: Prisma.XOR<Prisma.TableSessionCreateWithoutOrdersInput, Prisma.TableSessionUncheckedCreateWithoutOrdersInput>
  where?: Prisma.TableSessionWhereInput
}

export type TableSessionUpdateToOneWithWhereWithoutOrdersInput = {
  where?: Prisma.TableSessionWhereInput
  data: Prisma.XOR<Prisma.TableSessionUpdateWithoutOrdersInput, Prisma.TableSessionUncheckedUpdateWithoutOrdersInput>
}

export type TableSessionUpdateWithoutOrdersInput = {
  customerName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  startTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endTime?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  table?: Prisma.TableUpdateOneRequiredWithoutSessionsNestedInput
}

export type TableSessionUncheckedUpdateWithoutOrdersInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  tableId?: Prisma.IntFieldUpdateOperationsInput | number
  customerName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  startTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endTime?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type TableSessionCreateManyTableInput = {
  id?: number
  customerName?: string | null
  startTime?: Date | string
  endTime?: Date | string | null
}

export type TableSessionUpdateWithoutTableInput = {
  customerName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  startTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endTime?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  orders?: Prisma.OrderUpdateManyWithoutSessionNestedInput
}

export type TableSessionUncheckedUpdateWithoutTableInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  customerName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  startTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endTime?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  orders?: Prisma.OrderUncheckedUpdateManyWithoutSessionNestedInput
}

export type TableSessionUncheckedUpdateManyWithoutTableInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  customerName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  startTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endTime?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}


/**
 * Count Type TableSessionCountOutputType
 */

export type TableSessionCountOutputType = {
  orders: number
}

export type TableSessionCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  orders?: boolean | TableSessionCountOutputTypeCountOrdersArgs
}

/**
 * TableSessionCountOutputType without action
 */
export type TableSessionCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TableSessionCountOutputType
   */
  select?: Prisma.TableSessionCountOutputTypeSelect<ExtArgs> | null
}

/**
 * TableSessionCountOutputType without action
 */
export type TableSessionCountOutputTypeCountOrdersArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.OrderWhereInput
}


export type TableSessionSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  tableId?: boolean
  customerName?: boolean
  startTime?: boolean
  endTime?: boolean
  table?: boolean | Prisma.TableDefaultArgs<ExtArgs>
  orders?: boolean | Prisma.TableSession$ordersArgs<ExtArgs>
  _count?: boolean | Prisma.TableSessionCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["tableSession"]>

export type TableSessionSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  tableId?: boolean
  customerName?: boolean
  startTime?: boolean
  endTime?: boolean
  table?: boolean | Prisma.TableDefaultArgs<ExtArgs>
}, ExtArgs["result"]["tableSession"]>

export type TableSessionSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  tableId?: boolean
  customerName?: boolean
  startTime?: boolean
  endTime?: boolean
  table?: boolean | Prisma.TableDefaultArgs<ExtArgs>
}, ExtArgs["result"]["tableSession"]>

export type TableSessionSelectScalar = {
  id?: boolean
  tableId?: boolean
  customerName?: boolean
  startTime?: boolean
  endTime?: boolean
}

export type TableSessionOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "tableId" | "customerName" | "startTime" | "endTime", ExtArgs["result"]["tableSession"]>
export type TableSessionInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  table?: boolean | Prisma.TableDefaultArgs<ExtArgs>
  orders?: boolean | Prisma.TableSession$ordersArgs<ExtArgs>
  _count?: boolean | Prisma.TableSessionCountOutputTypeDefaultArgs<ExtArgs>
}
export type TableSessionIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  table?: boolean | Prisma.TableDefaultArgs<ExtArgs>
}
export type TableSessionIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  table?: boolean | Prisma.TableDefaultArgs<ExtArgs>
}

export type $TableSessionPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "TableSession"
  objects: {
    table: Prisma.$TablePayload<ExtArgs>
    orders: Prisma.$OrderPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    tableId: number
    customerName: string | null
    startTime: Date
    endTime: Date | null
  }, ExtArgs["result"]["tableSession"]>
  composites: {}
}

export type TableSessionGetPayload<S extends boolean | null | undefined | TableSessionDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$TableSessionPayload, S>

export type TableSessionCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<TableSessionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: TableSessionCountAggregateInputType | true
  }

export interface TableSessionDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TableSession'], meta: { name: 'TableSession' } }
  /**
   * Find zero or one TableSession that matches the filter.
   * @param {TableSessionFindUniqueArgs} args - Arguments to find a TableSession
   * @example
   * // Get one TableSession
   * const tableSession = await prisma.tableSession.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends TableSessionFindUniqueArgs>(args: Prisma.SelectSubset<T, TableSessionFindUniqueArgs<ExtArgs>>): Prisma.Prisma__TableSessionClient<runtime.Types.Result.GetResult<Prisma.$TableSessionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one TableSession that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {TableSessionFindUniqueOrThrowArgs} args - Arguments to find a TableSession
   * @example
   * // Get one TableSession
   * const tableSession = await prisma.tableSession.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends TableSessionFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, TableSessionFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__TableSessionClient<runtime.Types.Result.GetResult<Prisma.$TableSessionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first TableSession that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TableSessionFindFirstArgs} args - Arguments to find a TableSession
   * @example
   * // Get one TableSession
   * const tableSession = await prisma.tableSession.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends TableSessionFindFirstArgs>(args?: Prisma.SelectSubset<T, TableSessionFindFirstArgs<ExtArgs>>): Prisma.Prisma__TableSessionClient<runtime.Types.Result.GetResult<Prisma.$TableSessionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first TableSession that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TableSessionFindFirstOrThrowArgs} args - Arguments to find a TableSession
   * @example
   * // Get one TableSession
   * const tableSession = await prisma.tableSession.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends TableSessionFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, TableSessionFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__TableSessionClient<runtime.Types.Result.GetResult<Prisma.$TableSessionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more TableSessions that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TableSessionFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all TableSessions
   * const tableSessions = await prisma.tableSession.findMany()
   * 
   * // Get first 10 TableSessions
   * const tableSessions = await prisma.tableSession.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const tableSessionWithIdOnly = await prisma.tableSession.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends TableSessionFindManyArgs>(args?: Prisma.SelectSubset<T, TableSessionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TableSessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a TableSession.
   * @param {TableSessionCreateArgs} args - Arguments to create a TableSession.
   * @example
   * // Create one TableSession
   * const TableSession = await prisma.tableSession.create({
   *   data: {
   *     // ... data to create a TableSession
   *   }
   * })
   * 
   */
  create<T extends TableSessionCreateArgs>(args: Prisma.SelectSubset<T, TableSessionCreateArgs<ExtArgs>>): Prisma.Prisma__TableSessionClient<runtime.Types.Result.GetResult<Prisma.$TableSessionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many TableSessions.
   * @param {TableSessionCreateManyArgs} args - Arguments to create many TableSessions.
   * @example
   * // Create many TableSessions
   * const tableSession = await prisma.tableSession.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends TableSessionCreateManyArgs>(args?: Prisma.SelectSubset<T, TableSessionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many TableSessions and returns the data saved in the database.
   * @param {TableSessionCreateManyAndReturnArgs} args - Arguments to create many TableSessions.
   * @example
   * // Create many TableSessions
   * const tableSession = await prisma.tableSession.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many TableSessions and only return the `id`
   * const tableSessionWithIdOnly = await prisma.tableSession.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends TableSessionCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, TableSessionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TableSessionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a TableSession.
   * @param {TableSessionDeleteArgs} args - Arguments to delete one TableSession.
   * @example
   * // Delete one TableSession
   * const TableSession = await prisma.tableSession.delete({
   *   where: {
   *     // ... filter to delete one TableSession
   *   }
   * })
   * 
   */
  delete<T extends TableSessionDeleteArgs>(args: Prisma.SelectSubset<T, TableSessionDeleteArgs<ExtArgs>>): Prisma.Prisma__TableSessionClient<runtime.Types.Result.GetResult<Prisma.$TableSessionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one TableSession.
   * @param {TableSessionUpdateArgs} args - Arguments to update one TableSession.
   * @example
   * // Update one TableSession
   * const tableSession = await prisma.tableSession.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends TableSessionUpdateArgs>(args: Prisma.SelectSubset<T, TableSessionUpdateArgs<ExtArgs>>): Prisma.Prisma__TableSessionClient<runtime.Types.Result.GetResult<Prisma.$TableSessionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more TableSessions.
   * @param {TableSessionDeleteManyArgs} args - Arguments to filter TableSessions to delete.
   * @example
   * // Delete a few TableSessions
   * const { count } = await prisma.tableSession.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends TableSessionDeleteManyArgs>(args?: Prisma.SelectSubset<T, TableSessionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more TableSessions.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TableSessionUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many TableSessions
   * const tableSession = await prisma.tableSession.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends TableSessionUpdateManyArgs>(args: Prisma.SelectSubset<T, TableSessionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more TableSessions and returns the data updated in the database.
   * @param {TableSessionUpdateManyAndReturnArgs} args - Arguments to update many TableSessions.
   * @example
   * // Update many TableSessions
   * const tableSession = await prisma.tableSession.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more TableSessions and only return the `id`
   * const tableSessionWithIdOnly = await prisma.tableSession.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends TableSessionUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, TableSessionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TableSessionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one TableSession.
   * @param {TableSessionUpsertArgs} args - Arguments to update or create a TableSession.
   * @example
   * // Update or create a TableSession
   * const tableSession = await prisma.tableSession.upsert({
   *   create: {
   *     // ... data to create a TableSession
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the TableSession we want to update
   *   }
   * })
   */
  upsert<T extends TableSessionUpsertArgs>(args: Prisma.SelectSubset<T, TableSessionUpsertArgs<ExtArgs>>): Prisma.Prisma__TableSessionClient<runtime.Types.Result.GetResult<Prisma.$TableSessionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of TableSessions.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TableSessionCountArgs} args - Arguments to filter TableSessions to count.
   * @example
   * // Count the number of TableSessions
   * const count = await prisma.tableSession.count({
   *   where: {
   *     // ... the filter for the TableSessions we want to count
   *   }
   * })
  **/
  count<T extends TableSessionCountArgs>(
    args?: Prisma.Subset<T, TableSessionCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], TableSessionCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a TableSession.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TableSessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends TableSessionAggregateArgs>(args: Prisma.Subset<T, TableSessionAggregateArgs>): Prisma.PrismaPromise<GetTableSessionAggregateType<T>>

  /**
   * Group by TableSession.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TableSessionGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends TableSessionGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: TableSessionGroupByArgs['orderBy'] }
      : { orderBy?: TableSessionGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, TableSessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTableSessionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the TableSession model
 */
readonly fields: TableSessionFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for TableSession.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__TableSessionClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  table<T extends Prisma.TableDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.TableDefaultArgs<ExtArgs>>): Prisma.Prisma__TableClient<runtime.Types.Result.GetResult<Prisma.$TablePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  orders<T extends Prisma.TableSession$ordersArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.TableSession$ordersArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the TableSession model
 */
export interface TableSessionFieldRefs {
  readonly id: Prisma.FieldRef<"TableSession", 'Int'>
  readonly tableId: Prisma.FieldRef<"TableSession", 'Int'>
  readonly customerName: Prisma.FieldRef<"TableSession", 'String'>
  readonly startTime: Prisma.FieldRef<"TableSession", 'DateTime'>
  readonly endTime: Prisma.FieldRef<"TableSession", 'DateTime'>
}
    

// Custom InputTypes
/**
 * TableSession findUnique
 */
export type TableSessionFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TableSession
   */
  select?: Prisma.TableSessionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TableSession
   */
  omit?: Prisma.TableSessionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TableSessionInclude<ExtArgs> | null
  /**
   * Filter, which TableSession to fetch.
   */
  where: Prisma.TableSessionWhereUniqueInput
}

/**
 * TableSession findUniqueOrThrow
 */
export type TableSessionFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TableSession
   */
  select?: Prisma.TableSessionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TableSession
   */
  omit?: Prisma.TableSessionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TableSessionInclude<ExtArgs> | null
  /**
   * Filter, which TableSession to fetch.
   */
  where: Prisma.TableSessionWhereUniqueInput
}

/**
 * TableSession findFirst
 */
export type TableSessionFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TableSession
   */
  select?: Prisma.TableSessionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TableSession
   */
  omit?: Prisma.TableSessionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TableSessionInclude<ExtArgs> | null
  /**
   * Filter, which TableSession to fetch.
   */
  where?: Prisma.TableSessionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TableSessions to fetch.
   */
  orderBy?: Prisma.TableSessionOrderByWithRelationInput | Prisma.TableSessionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for TableSessions.
   */
  cursor?: Prisma.TableSessionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TableSessions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TableSessions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of TableSessions.
   */
  distinct?: Prisma.TableSessionScalarFieldEnum | Prisma.TableSessionScalarFieldEnum[]
}

/**
 * TableSession findFirstOrThrow
 */
export type TableSessionFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TableSession
   */
  select?: Prisma.TableSessionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TableSession
   */
  omit?: Prisma.TableSessionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TableSessionInclude<ExtArgs> | null
  /**
   * Filter, which TableSession to fetch.
   */
  where?: Prisma.TableSessionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TableSessions to fetch.
   */
  orderBy?: Prisma.TableSessionOrderByWithRelationInput | Prisma.TableSessionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for TableSessions.
   */
  cursor?: Prisma.TableSessionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TableSessions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TableSessions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of TableSessions.
   */
  distinct?: Prisma.TableSessionScalarFieldEnum | Prisma.TableSessionScalarFieldEnum[]
}

/**
 * TableSession findMany
 */
export type TableSessionFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TableSession
   */
  select?: Prisma.TableSessionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TableSession
   */
  omit?: Prisma.TableSessionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TableSessionInclude<ExtArgs> | null
  /**
   * Filter, which TableSessions to fetch.
   */
  where?: Prisma.TableSessionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TableSessions to fetch.
   */
  orderBy?: Prisma.TableSessionOrderByWithRelationInput | Prisma.TableSessionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing TableSessions.
   */
  cursor?: Prisma.TableSessionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TableSessions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TableSessions.
   */
  skip?: number
  distinct?: Prisma.TableSessionScalarFieldEnum | Prisma.TableSessionScalarFieldEnum[]
}

/**
 * TableSession create
 */
export type TableSessionCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TableSession
   */
  select?: Prisma.TableSessionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TableSession
   */
  omit?: Prisma.TableSessionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TableSessionInclude<ExtArgs> | null
  /**
   * The data needed to create a TableSession.
   */
  data: Prisma.XOR<Prisma.TableSessionCreateInput, Prisma.TableSessionUncheckedCreateInput>
}

/**
 * TableSession createMany
 */
export type TableSessionCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many TableSessions.
   */
  data: Prisma.TableSessionCreateManyInput | Prisma.TableSessionCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * TableSession createManyAndReturn
 */
export type TableSessionCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TableSession
   */
  select?: Prisma.TableSessionSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the TableSession
   */
  omit?: Prisma.TableSessionOmit<ExtArgs> | null
  /**
   * The data used to create many TableSessions.
   */
  data: Prisma.TableSessionCreateManyInput | Prisma.TableSessionCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TableSessionIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * TableSession update
 */
export type TableSessionUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TableSession
   */
  select?: Prisma.TableSessionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TableSession
   */
  omit?: Prisma.TableSessionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TableSessionInclude<ExtArgs> | null
  /**
   * The data needed to update a TableSession.
   */
  data: Prisma.XOR<Prisma.TableSessionUpdateInput, Prisma.TableSessionUncheckedUpdateInput>
  /**
   * Choose, which TableSession to update.
   */
  where: Prisma.TableSessionWhereUniqueInput
}

/**
 * TableSession updateMany
 */
export type TableSessionUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update TableSessions.
   */
  data: Prisma.XOR<Prisma.TableSessionUpdateManyMutationInput, Prisma.TableSessionUncheckedUpdateManyInput>
  /**
   * Filter which TableSessions to update
   */
  where?: Prisma.TableSessionWhereInput
  /**
   * Limit how many TableSessions to update.
   */
  limit?: number
}

/**
 * TableSession updateManyAndReturn
 */
export type TableSessionUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TableSession
   */
  select?: Prisma.TableSessionSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the TableSession
   */
  omit?: Prisma.TableSessionOmit<ExtArgs> | null
  /**
   * The data used to update TableSessions.
   */
  data: Prisma.XOR<Prisma.TableSessionUpdateManyMutationInput, Prisma.TableSessionUncheckedUpdateManyInput>
  /**
   * Filter which TableSessions to update
   */
  where?: Prisma.TableSessionWhereInput
  /**
   * Limit how many TableSessions to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TableSessionIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * TableSession upsert
 */
export type TableSessionUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TableSession
   */
  select?: Prisma.TableSessionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TableSession
   */
  omit?: Prisma.TableSessionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TableSessionInclude<ExtArgs> | null
  /**
   * The filter to search for the TableSession to update in case it exists.
   */
  where: Prisma.TableSessionWhereUniqueInput
  /**
   * In case the TableSession found by the `where` argument doesn't exist, create a new TableSession with this data.
   */
  create: Prisma.XOR<Prisma.TableSessionCreateInput, Prisma.TableSessionUncheckedCreateInput>
  /**
   * In case the TableSession was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.TableSessionUpdateInput, Prisma.TableSessionUncheckedUpdateInput>
}

/**
 * TableSession delete
 */
export type TableSessionDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TableSession
   */
  select?: Prisma.TableSessionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TableSession
   */
  omit?: Prisma.TableSessionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TableSessionInclude<ExtArgs> | null
  /**
   * Filter which TableSession to delete.
   */
  where: Prisma.TableSessionWhereUniqueInput
}

/**
 * TableSession deleteMany
 */
export type TableSessionDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which TableSessions to delete
   */
  where?: Prisma.TableSessionWhereInput
  /**
   * Limit how many TableSessions to delete.
   */
  limit?: number
}

/**
 * TableSession.orders
 */
export type TableSession$ordersArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Order
   */
  select?: Prisma.OrderSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Order
   */
  omit?: Prisma.OrderOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OrderInclude<ExtArgs> | null
  where?: Prisma.OrderWhereInput
  orderBy?: Prisma.OrderOrderByWithRelationInput | Prisma.OrderOrderByWithRelationInput[]
  cursor?: Prisma.OrderWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.OrderScalarFieldEnum | Prisma.OrderScalarFieldEnum[]
}

/**
 * TableSession without action
 */
export type TableSessionDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TableSession
   */
  select?: Prisma.TableSessionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TableSession
   */
  omit?: Prisma.TableSessionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TableSessionInclude<ExtArgs> | null
}
